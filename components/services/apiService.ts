import AsyncStorage from "@react-native-async-storage/async-storage";

const API_BASE_URL = "https://begainer-api.onrender.com/api";

export interface User {
  id: string;
  email?: string;
  name?: string;
}

export interface AuthResponse {
  token?: string;
  user?: User;
  id?: string;
  error?: string;
  name?: string;
}

export interface UserPreferencesResponse {
  user_id: string;
  name: string;
  error?: string;
}

export interface UserPreferencesPayload {
  user_id: string | null;
  name: string | null;
  gender: string | null;
  age: number | null;
  height_cm: number | null;
  weight_kg: number | null;
  training_days?: number[];
  goal: string | null;
  training_place: string | null;
  session_length: number | null;
  milestone: string | null;
  active_program_id?: string | null;
}

export interface ExerciseDefinition {
  id: string;
  name: string;
  description: string | null;
  muscle_group: string;
}

export interface SessionExercise {
  id: string;
  exercise_id: string;
  name: string;
  description?: string | null;
  muscle_group: string;
  sets: number;
  reps: number;
  rest_time: number;
}
export interface ProgramSession {
  id: string;
  program_id: string;
  name: string;
  exercises: SessionExercise[];
}
export interface UserProgram {
  id: string;
  user_id: string;
  name: string;
  goal: string;
  duration_weeks: number;
  error?: string;
}

export interface UserPreferencesDetail extends UserPreferencesPayload {
  id?: string;
  error?: string;
}

export interface AutoGeneratedProgramResponse extends UserProgram {
  sessions?: ProgramSession[];
  message?: string;
}

const handleApiResponse = async <T>(response: Response): Promise<T> => {
  const responseText = await response.text();
  let dataJson: any;

  try {
    if (responseText) {
      dataJson = JSON.parse(responseText);
    }
  } catch (parseError) {
    if (!response.ok) {
      return { error: `Erreur serveur (${response.status}). Réponse non lisible.` } as T;
    }
    return { error: "Réponse du serveur au format inattendu (JSON invalide)." } as T;
  }

  if (!response.ok) {
    if (!dataJson) {
        return { error: `Erreur HTTP ${response.status}: ${response.statusText || "Erreur inconnue du serveur"}` } as T;
    }
  }
  
  if (response.status === 204 && !dataJson) {
    return {} as T;
  }

  return dataJson as T;
};

export const fetchUserPreferencesDetails = async (
  userId: string,
  token: string
): Promise<UserPreferencesDetail> => {
  const response = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleApiResponse<UserPreferencesDetail>(response);
};

export const submitUserPreferencesAndGenerate = async (
  preferences: UserPreferencesPayload,
  token: string
): Promise<AutoGeneratedProgramResponse> => {
  if (!preferences.user_id) {
    return { error: "ID utilisateur manquant.", id: '', user_id: '', name: '', goal: '', duration_weeks: 0 };
  }

  const initialPrefsResponse = await fetch(`${API_BASE_URL}/user-preferences`, {
    method: "POST",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(preferences),
  });

  if (!initialPrefsResponse.ok) {
      const errorData = await handleApiResponse<{error?: string}>(initialPrefsResponse);
      return { error: `Échec de la soumission des préférences initiales: ${errorData.error || initialPrefsResponse.statusText}`, id: '', user_id: preferences.user_id, name: '', goal: '', duration_weeks: 0 };
  }

  const autoGenerateCallResponse = await fetch(
    `${API_BASE_URL}/programs/auto-generate`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
      body: JSON.stringify({ user_id: preferences.user_id }),
    }
  );
  const genResponse = await handleApiResponse<{message?: string; program_id?: string; error?: string}>(autoGenerateCallResponse);

  if (genResponse.error || !genResponse.program_id) {
    return { error: genResponse.error || "ID de programme manquant après génération", id: '', user_id: preferences.user_id || '', name: '', goal: '', duration_weeks: 0 };
  }
  
  const newProgramId = genResponse.program_id;

  if (newProgramId && preferences.user_id) {
    const finalPreferencesPayload: UserPreferencesPayload = {
      ...preferences,
      active_program_id: newProgramId,
    };
    const setActiveProgramResponse = await fetch(`${API_BASE_URL}/user-preferences/${preferences.user_id}`, {
      method: "PUT",
      headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
      body: JSON.stringify(finalPreferencesPayload),
    });
    if (!setActiveProgramResponse.ok) {
        const errorData = await handleApiResponse<{error?: string}>(setActiveProgramResponse);
        const programDetails = await fetchProgramById(newProgramId, token);
        return {
            ...programDetails,
            message: genResponse.message,
            error: (programDetails.error ? programDetails.error + "\n" : "") +
                   `Programme généré (ID: ${newProgramId}) mais échec de la définition comme actif: ${errorData.error || setActiveProgramResponse.statusText}`
        };
    }
  }
  const programDetails = await fetchProgramById(newProgramId, token);
  if (programDetails.error) {
      return { ...programDetails, message: genResponse.message };
  }
  const sessions = await fetchSessionsWithExercisesForProgram(newProgramId, token);
  const sessionsArray = Array.isArray(sessions) ? sessions : [];

  return { ...programDetails, message: genResponse.message, sessions: sessionsArray };
};

export const fetchProgramById = async (
  programId: string,
  token: string
): Promise<UserProgram> => {
  const response = await fetch(`${API_BASE_URL}/programs/${programId}`, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleApiResponse<UserProgram>(response);
};

export const fetchSessionsWithExercisesForProgram = async (
  programId: string,
  token: string
): Promise<ProgramSession[] | { error: string }> => {
  const response = await fetch(
    `${API_BASE_URL}/sessions/program/${programId}`,
    {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    }
  );
  return handleApiResponse<ProgramSession[] | { error: string }>(response);
};

export const fetchExercisesForOneSession = async (
  sessionId: string,
  token: string
): Promise<SessionExercise[] | { error: string }> => {
  const url = `${API_BASE_URL}/sessions/${sessionId}/exercises`;

  try {
    const response = await fetch(url, {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    });

    const result = await handleApiResponse<SessionExercise[] | { error: string }>(response);
    return result;

  } catch (error: any) {
    return { error: `Exception lors de la récupération des exercices: ${error.message}` };
  }
};
export type SubmitPreferencesResponse =
  | UserPreferencesResponse
  | { message: string; error?: string };

export const loginUser = async (
  email: string,
  password: string
): Promise<AuthResponse> => {
  const response = await fetch(`${API_BASE_URL}/auth/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });
  return handleApiResponse<AuthResponse>(response);
};

export const registerUser = async (
  email: string,
  password: string
): Promise<AuthResponse> => {
  const response = await fetch(`${API_BASE_URL}/auth/register`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });
  const registerData = await handleApiResponse<AuthResponse>(response);

  if (registerData.error) {
    return registerData;
  }

  const loginResponse = await fetch(`${API_BASE_URL}/auth/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });

  const loginData = await handleApiResponse<AuthResponse>(loginResponse);
  if (loginData.error) {
    return {
        ...registerData,
        error: `Enregistrement réussi, mais connexion auto échouée: ${loginData.error}`,
        token: undefined,
    };
  }
  return {
    ...registerData,
    token: loginData.token,
    user: loginData.user || registerData.user,
    error: undefined,
  };
};

export const fetchUserPreferences = async (
  userId: string,
  token: string
): Promise<UserPreferencesResponse> => {
  const prefsUrl = `${API_BASE_URL}/user-preferences/${userId}`;
  const response = await fetch(prefsUrl, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleApiResponse<UserPreferencesResponse>(response);
};

export const submitUserPreferences = async (
  preferences: UserPreferencesPayload
): Promise<SubmitPreferencesResponse> => {
  const url = `${API_BASE_URL}/user-preferences`;
  const token = await AsyncStorage.getItem("token");
  if (!token) {
    return { message: "Token d'authentification non trouvé.", error: "Token d'authentification non trouvé." };
  }
  const response = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(preferences),
  });
  return handleApiResponse<SubmitPreferencesResponse>(response);
};

export const updateUserPreferences = async (
  userId: string,
  preferences: Partial<UserPreferencesPayload>,
  token: string
): Promise<UserPreferencesDetail | { error: string }> => {
  const response = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(preferences),
  });
  return handleApiResponse<UserPreferencesDetail | { error: string }>(response);
};

export const autoGenerateNewProgram = async (
  userId: string,
  token: string
): Promise<{message?: string; program_id?: string; error?: string}> => {
  const payload = { user_id: userId };
  const response = await fetch(`${API_BASE_URL}/programs/auto-generate`, {
    method: "POST",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(payload),
  });
  return handleApiResponse<{message?: string; program_id?: string; error?: string}>(response);
};

export const updateUserActiveProgram = async (
  userId: string,
  currentPrefs: UserPreferencesPayload,
  activeProgramId: string,
  token: string
): Promise<UserPreferencesDetail | { error: string }> => {
  const updatePayload: UserPreferencesPayload = {
      ...currentPrefs,
      user_id: userId,
      active_program_id: activeProgramId,
  };
  const response = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(updatePayload),
  });
  return handleApiResponse<UserPreferencesDetail | { error: string }>(response);
};
