import AsyncStorage from "@react-native-async-storage/async-storage";

const API_BASE_URL = "https://begainer-api.onrender.com/api";

// Interface definitions (assuming they remain unchanged from your provided code)
export interface User {
  id: string;
  email?: string;
  name?: string;
}

export interface AuthResponse {
  token?: string;
  user?: User;
  id?: string;
  error?: string;
  name?: string;
}

export interface UserPreferencesResponse { // Simpler response, might be for basic GET
  user_id: string;
  name: string;
  error?: string;
}

export interface UserPreferencesPayload {
  user_id: string | null;
  name: string | null;
  gender: string | null;
  age: number | null;
  height_cm: number | null;
  weight_kg: number | null;
  training_days?: number[];
  goal: string | null;
  training_place: string | null;
  session_length: number | null;
  milestone: string | null;
  active_program_id?: string | null;
}

export interface ExerciseDefinition {
  id: string;
  name: string;
  description: string | null;
  muscle_group: string;
}

export interface SessionExercise {
  id: string;
  exercise_id: string;
  name: string;
  description?: string | null;
  muscle_group: string;
  sets: number;
  reps: number;
  rest_time: number;
}
export interface ProgramSession {
  id: string;
  program_id: string;
  name: string;
  day_number: number;
  exercise_count: number;
  exercises: SessionExercise[];
}
export interface UserProgram {
  id: string;
  user_id: string;
  name: string;
  goal: string;
  duration_weeks: number;
  start_date: string;
  error?: string;
}

export interface UserPreferencesDetail extends UserPreferencesPayload {
  id?: string; // This 'id' usually refers to the preference record's own ID in the database
  error?: string;
}

export interface AutoGeneratedProgramResponse extends UserProgram {
  sessions?: ProgramSession[];
  message?: string;
  // Note: UserProgram already has an optional 'error' field. 
  // If this top-level error is different, it might need distinct naming or handling.
}

// Helper to handle API responses
const handleApiResponse = async <T>(response: Response): Promise<T> => {
  const responseText = await response.text();
  let dataJson: any;

  try {
    if (responseText) {
      dataJson = JSON.parse(responseText);
    }
  } catch (parseError) {
    // If parsing fails, and response was not ok, return a generic server error.
    if (!response.ok) {
      return { error: `Erreur serveur (${response.status}). Réponse non lisible.` } as T;
    }
    // If parsing fails, but response was ok (e.g. 200 with invalid JSON), it's an unexpected format.
    return { error: "Réponse du serveur au format inattendu (JSON invalide)." } as T;
  }

  // If response is not OK, and we have parsed JSON, assume it's an error object from the backend.
  if (!response.ok) {
    if (!dataJson) { // No JSON body from a failed request
        return { error: `Erreur HTTP ${response.status}: ${response.statusText || "Erreur inconnue du serveur"}` } as T;
    }
    return dataJson as T; // e.g., { error: "Backend validation failed" }
  }
  
  // Handle 204 No Content specifically - return an empty object signifying success with no body.
  if (response.status === 204 && !dataJson) {
    return {} as T;
  }

  return dataJson as T; // Successful response with JSON body
};

// Fetches detailed user preferences
export const fetchUserPreferencesDetails = async (
  userId: string,
  token: string
): Promise<UserPreferencesDetail> => {
  const response = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleApiResponse<UserPreferencesDetail>(response);
};

// Deletes a program by its ID
export const deleteProgram = async (
  programId: string,
  token: string
): Promise<{ message?: string; error?: string }> => {
  const response = await fetch(`${API_BASE_URL}/programs/${programId}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  if (response.status === 204) { // Successfully deleted, no content
    return { message: "Programme supprimé avec succès." };
  }
  return handleApiResponse<{ message?: string; error?: string }>(response); // Handles other cases (e.g., 200 with message or error)
};

/**
 * Submits initial user preferences (POST) and generates a new program.
 * If an active program already exists for the user (e.g., due to a previous incomplete flow),
 * it attempts to delete it before proceeding.
 */
export const submitUserPreferencesAndGenerate = async (
  preferences: UserPreferencesPayload, // New preferences to be set
  token: string
): Promise<AutoGeneratedProgramResponse> => {
  if (!preferences.user_id) {
    return { error: "ID utilisateur manquant.", id: '', user_id: '', name: '', goal: '', duration_weeks: 0, start_date: '' };
  }

  let accumulatedError = "";

  // 1. Fetch current preferences to check for an existing active program and delete it
  try {
    const currentPrefsDetails = await fetchUserPreferencesDetails(preferences.user_id, token);
    if (currentPrefsDetails && currentPrefsDetails.active_program_id && !currentPrefsDetails.error) {
      const oldProgramId = currentPrefsDetails.active_program_id;
      console.log(`submitUserPreferencesAndGenerate: Tentative de suppression de l'ancien programme actif: ${oldProgramId}`);
      const deleteResponse = await deleteProgram(oldProgramId, token);
      if (deleteResponse.error) {
        const errMsg = `Échec de la suppression de l'ancien programme ${oldProgramId}: ${deleteResponse.error}.`;
        console.warn(`submitUserPreferencesAndGenerate: ${errMsg}`);
        accumulatedError += errMsg + "\n";
      } else {
        console.log(`submitUserPreferencesAndGenerate: Ancien programme ${oldProgramId} supprimé avec succès.`);
      }
    }
  } catch (e: any) {
    const errMsg = `Erreur lors de la récupération/suppression de l'ancien programme actif: ${e.message}.`;
    console.warn(`submitUserPreferencesAndGenerate: ${errMsg}`);
    accumulatedError += errMsg + "\n";
  }

  // 2. Submit the new preferences (POST request)
  const initialPrefsResponse = await fetch(`${API_BASE_URL}/user-preferences`, {
    method: "POST",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(preferences), 
  });

  const initialPrefsResult = await handleApiResponse<UserPreferencesDetail>(initialPrefsResponse);

  if (initialPrefsResult.error) {
      accumulatedError += `Échec de la soumission des préférences initiales: ${initialPrefsResult.error || initialPrefsResponse.statusText}`;
      return { error: accumulatedError.trim(), id: '', user_id: preferences.user_id, name: '', goal: '', duration_weeks: 0, start_date: '' };
  }

  // 3. Auto-generate new program
  const autoGenerateCallResponse = await fetch(
    `${API_BASE_URL}/programs/auto-generate`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
      body: JSON.stringify({ user_id: preferences.user_id }), 
    }
  );
  const genResponse = await handleApiResponse<{message?: string; program_id?: string; error?: string}>(autoGenerateCallResponse);

  if (genResponse.error || !genResponse.program_id) {
    accumulatedError += genResponse.error || "ID de programme manquant après génération";
    return { error: accumulatedError.trim(), id: '', user_id: preferences.user_id || '', name: '', goal: '', duration_weeks: 0, start_date: '' };
  }
  
  const newProgramId = genResponse.program_id;

  // 4. Set the new program as active by updating user preferences (PUT)
  const finalPreferencesPayload: UserPreferencesPayload = {
    ...initialPrefsResult, // Use the preferences returned by the POST, which should be the full, saved object
    active_program_id: newProgramId,
  };

  const setActiveProgramResponse = await fetch(`${API_BASE_URL}/user-preferences/${preferences.user_id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(finalPreferencesPayload),
  });
  
  const finalPrefsUpdateResult = await handleApiResponse<UserPreferencesDetail>(setActiveProgramResponse);

  // Fetch details of the newly generated program regardless of the final PUT's success
  const programDetails = await fetchProgramById(newProgramId, token);
  let sessionsArray: ProgramSession[] = [];
  if (!programDetails.error) {
      const sessionsData = await fetchSessionsWithExercisesForProgram(newProgramId, token);
      if (Array.isArray(sessionsData)) {
          sessionsArray = sessionsData;
      } else if(sessionsData.error) {
          accumulatedError += `Erreur chargement sessions: ${sessionsData.error}\n`;
      }
  } else {
      accumulatedError += `Erreur chargement détails programme: ${programDetails.error}\n`;
  }

  if (finalPrefsUpdateResult.error) {
      accumulatedError += `Programme généré (ID: ${newProgramId}) mais échec de la définition comme actif: ${finalPrefsUpdateResult.error}`;
  }
  
  return { 
    ...(programDetails.error
      ? {
          id: newProgramId,
          user_id: preferences.user_id,
          name: "Détails indisponibles",
          goal: preferences.goal || "N/A",
          duration_weeks: 0,
          start_date: "",
        }
      : programDetails),
    sessions: sessionsArray, 
    message: genResponse.message,
    error: accumulatedError ? accumulatedError.trim() : undefined 
  };
};


/**
 * Updates existing user preferences (PUT) and then automatically deletes any old program,
 * generates a new program based on these updated preferences, and sets it as active.
 */
export const updateUserPreferencesAndRegenerateProgram = async (
  userId: string,
  preferencesToUpdate: Partial<UserPreferencesPayload>, // The specific fields the user wants to change
  token: string
): Promise<AutoGeneratedProgramResponse> => {
  let accumulatedError = "";

  // 1. Fetch current full preferences to get active_program_id and as a base for updates
  let currentFullPrefs: UserPreferencesDetail;
  try {
    const prefsDetails = await fetchUserPreferencesDetails(userId, token);
    if (prefsDetails.error) {
      return { error: `Erreur lors de la récupération des préférences actuelles: ${prefsDetails.error}`, id: '', user_id: userId, name: '', goal: '', duration_weeks: 0, start_date: '' };
    }
    currentFullPrefs = prefsDetails;
  } catch (e: any) {
    return { error: `Exception lors de la récupération des préférences: ${e.message}`, id: '', user_id: userId, name: '', goal: '', duration_weeks: 0, start_date: '' };
  }

  // 2. Delete existing active program, if any
  if (currentFullPrefs.active_program_id) {
    const oldProgramId = currentFullPrefs.active_program_id;
    console.log(`updateUserPreferencesAndRegenerateProgram: Tentative de suppression de l'ancien programme actif: ${oldProgramId}`);
    const deleteResponse = await deleteProgram(oldProgramId, token);
    if (deleteResponse.error) {
      const errMsg = `Échec de la suppression de l'ancien programme ${oldProgramId}: ${deleteResponse.error}.`;
      console.warn(`updateUserPreferencesAndRegenerateProgram: ${errMsg}`);
      accumulatedError += errMsg + "\n";
    } else {
      console.log(`updateUserPreferencesAndRegenerateProgram: Ancien programme ${oldProgramId} supprimé avec succès.`);
    }
  }

  // 3. Prepare the complete set of preferences for the first PUT request.
  // Merge existing preferences with the new partial updates.
  // Explicitly clear active_program_id before generating a new one.
  const prefsForFirstPut: UserPreferencesPayload = {
    ...currentFullPrefs,      // Base with all existing fields
    ...preferencesToUpdate,   // Apply user's specific changes
    user_id: userId,          // Ensure userId is correctly set
    active_program_id: undefined, // Clear active program ID for this update
  };

  // 4. Update user preferences with the changes (first PUT)
  const updatePrefsResponse = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(prefsForFirstPut),
  });
  const updatedPrefsResult = await handleApiResponse<UserPreferencesDetail>(updatePrefsResponse);

  if (updatedPrefsResult.error) {
    accumulatedError += `Échec de la mise à jour des préférences utilisateur: ${updatedPrefsResult.error}`;
    // Return early as subsequent steps depend on this success
    return { error: accumulatedError.trim(), id: '', user_id: userId, name: preferencesToUpdate.name || currentFullPrefs.name || '', goal: preferencesToUpdate.goal || currentFullPrefs.goal || '', duration_weeks: 0, start_date: '' };
  }

  // 5. Auto-generate new program based on the *just updated* preferences
  const genResponse = await autoGenerateNewProgram(userId, token);

  if (genResponse.error || !genResponse.program_id) {
    accumulatedError += `Préférences mises à jour, mais échec de la génération du nouveau programme: ${genResponse.error || "ID de programme manquant"}`;
    return { 
      error: accumulatedError.trim(), 
      id: '', 
      user_id: userId, 
      name: updatedPrefsResult.name || '', 
      goal: updatedPrefsResult.goal || '', 
      duration_weeks: 0,
      start_date: ''
    };
  }
  const newProgramId = genResponse.program_id;

  // 6. Set the new program as active by updating user preferences again (second PUT)
  const finalPreferencesPayload: UserPreferencesPayload = {
    ...updatedPrefsResult, // Use the state of preferences after the first successful PUT
    active_program_id: newProgramId,
  };

  const setActiveProgramResponse = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(finalPreferencesPayload),
  });
  const finalPrefsUpdateResult = await handleApiResponse<UserPreferencesDetail>(setActiveProgramResponse);
  
  // Fetch details of the newly generated program
  const programDetails = await fetchProgramById(newProgramId, token);
  let sessionsArray: ProgramSession[] = [];

  if (!programDetails.error) {
      const sessionsData = await fetchSessionsWithExercisesForProgram(newProgramId, token);
      if (Array.isArray(sessionsData)) {
          sessionsArray = sessionsData;
      } else if(sessionsData.error) {
          accumulatedError += `Erreur chargement sessions du nouveau programme: ${sessionsData.error}\n`;
      }
  } else {
      accumulatedError += `Erreur chargement détails du nouveau programme: ${programDetails.error}\n`;
  }

  if (finalPrefsUpdateResult.error) {
    accumulatedError += `Programme généré (ID: ${newProgramId}) mais échec de la définition comme actif: ${finalPrefsUpdateResult.error}`;
  }

  return { 
    ...(programDetails.error
      ? {
          id: newProgramId,
          user_id: userId,
          name: "Détails indisponibles",
          goal: finalPreferencesPayload.goal || "N/A",
          duration_weeks: 0,
          start_date: "", // Ensure start_date is present
        }
      : programDetails),
    sessions: sessionsArray, 
    message: genResponse.message,
    error: accumulatedError ? accumulatedError.trim() : undefined 
  };
};


// --- Other existing functions from your apiService.ts ---

export const fetchProgramById = async (
  programId: string,
  token: string
): Promise<UserProgram> => {
  const response = await fetch(`${API_BASE_URL}/programs/${programId}`, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleApiResponse<UserProgram>(response);
};

export const fetchSessionsWithExercisesForProgram = async (
  programId: string,
  token: string
): Promise<ProgramSession[] | { error: string }> => {
  const response = await fetch(
    `${API_BASE_URL}/sessions/program/${programId}`,
    {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    }
  );
  return handleApiResponse<ProgramSession[] | { error: string }>(response);
};

export const fetchExercisesForOneSession = async (
  sessionId: string,
  token: string
): Promise<SessionExercise[] | { error: string }> => {
  const url = `${API_BASE_URL}/sessions/${sessionId}/exercises`;
  try {
    const response = await fetch(url, {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    });
    return await handleApiResponse<SessionExercise[] | { error: string }>(response);
  } catch (error: any) {
    return { error: `Exception lors de la récupération des exercices: ${error.message}` };
  }
};

export type SubmitPreferencesResponse =
  | UserPreferencesResponse // This seems like a simple response, might need to be UserPreferencesDetail
  | { message: string; error?: string };

export const loginUser = async (
  email: string,
  password: string
): Promise<AuthResponse> => {
  const response = await fetch(`${API_BASE_URL}/auth/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });
  return handleApiResponse<AuthResponse>(response);
};

export const registerUser = async (
  email: string,
  password: string
): Promise<AuthResponse> => {
  const response = await fetch(`${API_BASE_URL}/auth/register`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });
  const registerData = await handleApiResponse<AuthResponse>(response);

  if (registerData.error) {
    return registerData;
  }

  // Attempt to login automatically after successful registration
  const loginResponse = await fetch(`${API_BASE_URL}/auth/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });
  const loginData = await handleApiResponse<AuthResponse>(loginResponse);

  if (loginData.error) {
    return {
        ...registerData, // Return registration data (e.g., user object if created)
        error: `Enregistrement réussi, mais connexion auto échouée: ${loginData.error}`,
        token: undefined, // Ensure no token is passed if login failed
    };
  }
  return { // Success for both registration and subsequent login
    ...registerData, 
    token: loginData.token, 
    user: loginData.user || registerData.user, // Prefer login user details
    error: undefined, 
  };
};

// This function seems to fetch a simpler version of preferences.
// Kept for compatibility if used elsewhere, but fetchUserPreferencesDetails is more comprehensive.
export const fetchUserPreferences = async (
  userId: string,
  token: string
): Promise<UserPreferencesResponse> => {
  const prefsUrl = `${API_BASE_URL}/user-preferences/${userId}`;
  const response = await fetch(prefsUrl, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleApiResponse<UserPreferencesResponse>(response);
};

// This function submits preferences without generating a program.
// It might be used for saving preferences without immediate regeneration,
// if such a flow is needed. Otherwise, submitUserPreferencesAndGenerate is more common.
export const submitUserPreferences = async (
  preferences: UserPreferencesPayload
): Promise<SubmitPreferencesResponse> => {
  const url = `${API_BASE_URL}/user-preferences`;
  const token = await AsyncStorage.getItem("token");
  if (!token) {
    return { message: "Token d'authentification non trouvé.", error: "Token d'authentification non trouvé." };
  }
  const response = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(preferences),
  });
  return handleApiResponse<SubmitPreferencesResponse>(response);
};


// This function is called by DashboardScreen when user clicks "Generate Program"
// It only generates a program; setting it active is handled separately in the dashboard.
export const autoGenerateNewProgram = async (
  userId: string,
  token: string
): Promise<{message?: string; program_id?: string; error?: string}> => {
  const payload = { user_id: userId };
  const response = await fetch(`${API_BASE_URL}/programs/auto-generate`, {
    method: "POST",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(payload),
  });
  return handleApiResponse<{message?: string; program_id?: string; error?: string}>(response);
};

// This function is used by DashboardScreen to update only the active_program_id in user preferences
export const updateUserActiveProgram = async (
  userId: string,
  currentPrefs: UserPreferencesPayload, // The full current state of preferences
  activeProgramId: string, // The new program ID to set
  token: string
): Promise<UserPreferencesDetail | { error: string }> => {
  const updatePayload: UserPreferencesPayload = {
      ...currentPrefs, 
      user_id: userId, 
      active_program_id: activeProgramId,
  };
  const response = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(updatePayload),
  });
  return handleApiResponse<UserPreferencesDetail | { error: string }>(response);
};
