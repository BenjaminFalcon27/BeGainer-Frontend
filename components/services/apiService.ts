import AsyncStorage from "@react-native-async-storage/async-storage";

const API_BASE_URL = "https://begainer-api.onrender.com/api";

export interface User {
  id: string;
  email?: string;
  name?: string;
}

export interface AuthResponse {
  token?: string;
  user?: User;
  id?: string;
  error?: string;
  name?: string;
}

export interface UserPreferencesResponse {
  user_id: string;
  name: string;
  error?: string;
}

export interface UserPreferencesPayload {
  user_id: string | null;
  name: string | null;
  gender: string | null;
  age: number | null;
  height_cm: number | null;
  weight_kg: number | null;
  training_days?: number[];
  goal: string | null;
  training_place: string | null;
  session_length: number | null;
  milestone: string | null;
  active_program_id?: string | null;
}

export interface ExerciseDefinition {
  id: string;
  name: string;
  description: string | null;
  muscle_group: string;
  image_url?: string | null;
}

export interface SessionExercise {
  id: string;
  exercise_id: string; 
  name: string; 
  description?: string | null;
  muscle_group: string; 
  sets: number;
  reps: number;
  rest_time: number;
  image_url?: string | null; 
}
export interface ProgramSession {
  id: string;
  program_id: string;
  name: string;
  day_number: number;
  exercise_count: number; 
  exercises: SessionExercise[]; 
}
export interface UserProgram {
  id: string;
  user_id: string;
  name: string;
  goal: string;
  duration_weeks: number;
  start_date: string; 
  error?: string;
}

export interface UserPreferencesDetail extends UserPreferencesPayload {
  id?: string; 
  error?: string;
}

export interface AutoGeneratedProgramResponse extends UserProgram {
  sessions?: ProgramSession[]; 
  message?: string; 
  error?: string;
}

export interface SessionCountResponse {
  count: number;      
  sessionId: string;  
  error?: string;     
}

const handleApiResponse = async <T>(response: Response): Promise<T> => {
  const responseText = await response.text();
  let dataJson: any;

  try {
    if (responseText) {
      dataJson = JSON.parse(responseText);
    }
  } catch (parseError) {
    if (!response.ok) {
      return { error: `Erreur serveur (${response.status}). Réponse non lisible.` } as T;
    }
    return { error: "Réponse du serveur au format inattendu (JSON invalide)." } as T;
  }

  if (!response.ok) {
    if (!dataJson) { 
        return { error: `Erreur HTTP ${response.status}: ${response.statusText || "Erreur inconnue du serveur"}` } as T;
    }
    return dataJson as T;
  }

  if (response.status === 204 && !dataJson) { 
    return {} as T; 
  }

  return dataJson as T;
};

export const fetchUserPreferencesDetails = async (
  userId: string,
  token: string
): Promise<UserPreferencesDetail> => {
  const response = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleApiResponse<UserPreferencesDetail>(response);
};

export const deleteProgram = async (
  programId: string,
  token: string
): Promise<{ message?: string; error?: string }> => {
  const response = await fetch(`${API_BASE_URL}/programs/${programId}`, {
    method: "DELETE",
    headers: { Authorization: `Bearer ${token}` },
  });
  if (response.status === 204) {
    return { message: "Programme supprimé avec succès." };
  }
  return handleApiResponse<{ message?: string; error?: string }>(response);
};

export const submitUserPreferencesAndGenerate = async (
  preferences: UserPreferencesPayload,
  token: string
): Promise<AutoGeneratedProgramResponse> => {
  if (!preferences.user_id) {
    return { 
      error: "ID utilisateur manquant.", 
      id: '', user_id: '', name: '', goal: '', duration_weeks: 0, start_date: '' 
    };
  }

  let accumulatedError = "";

  try {
    const currentPrefsDetails = await fetchUserPreferencesDetails(preferences.user_id, token);
    if (currentPrefsDetails && !currentPrefsDetails.error && currentPrefsDetails.active_program_id) {
      const oldProgramId = currentPrefsDetails.active_program_id;
      const deleteResponse = await deleteProgram(oldProgramId, token);
      if (deleteResponse.error) {
        accumulatedError += `Échec de la suppression de l'ancien programme ${oldProgramId}: ${deleteResponse.error}. La génération continue.\n`; 
      }
    }
  } catch (e: any) {
    accumulatedError += `Exception lors de la vérification/suppression de l'ancien programme: ${e.message}. La génération continue.\n`;
  }

  const initialPrefsResponse = await fetch(`${API_BASE_URL}/user-preferences`, {
    method: "POST", 
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(preferences),
  });

  const initialPrefsResult = await handleApiResponse<UserPreferencesDetail>(initialPrefsResponse);

  if (initialPrefsResult.error) {
      accumulatedError += `Échec de la soumission des préférences: ${initialPrefsResult.error || initialPrefsResponse.statusText}`;
      return { 
        error: accumulatedError.trim(), 
        id: '', user_id: preferences.user_id, name: '', goal: preferences.goal || '', duration_weeks: 0, start_date: '' 
      };
  }

  const autoGenerateCallResponse = await fetch(
    `${API_BASE_URL}/programs/auto-generate`,
    {
      method: "POST",
      headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
      body: JSON.stringify({ user_id: preferences.user_id }), 
    }
  );
  const genResponse = await handleApiResponse<{message?: string; program_id?: string; error?: string}>(autoGenerateCallResponse);

  if (genResponse.error || !genResponse.program_id) {
    accumulatedError += ` Erreur de génération du programme: ${genResponse.error || "ID de programme manquant après génération"}`;
    return { 
      error: accumulatedError.trim(), 
      id: '', user_id: preferences.user_id || '', name: '', goal: preferences.goal || '', duration_weeks: 0, start_date: '' 
    };
  }

  const newProgramId = genResponse.program_id;

  const finalPreferencesPayload: UserPreferencesPayload = {
    ...initialPrefsResult, 
    user_id: preferences.user_id, 
    active_program_id: newProgramId,
  };

  const setActiveProgramResponse = await fetch(`${API_BASE_URL}/user-preferences/${preferences.user_id}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(finalPreferencesPayload),
  });

  const finalPrefsUpdateResult = await handleApiResponse<UserPreferencesDetail>(setActiveProgramResponse);

  const programDetails = await fetchProgramById(newProgramId, token); 
  let sessionsArray: ProgramSession[] = [];

  if (!programDetails.error) {
      const sessionsData = await fetchSessionsWithExercisesForProgram(newProgramId, token);
      if (Array.isArray(sessionsData)) { 
          sessionsArray = sessionsData;
      } else if(sessionsData.error) { 
          accumulatedError += ` Erreur lors du chargement des sessions du nouveau programme: ${sessionsData.error}\n`;
      }
  } else {
      accumulatedError += ` Erreur lors du chargement des détails du programme: ${programDetails.error}\n`;
  }

  if (finalPrefsUpdateResult.error) {
      accumulatedError += ` Programme généré (ID: ${newProgramId}) mais échec de la définition comme actif: ${finalPrefsUpdateResult.error}`;
  }

  return {
    ...(programDetails.error 
      ? {
          id: newProgramId, 
          user_id: preferences.user_id,
          name: "Détails du programme indisponibles",
          goal: preferences.goal || "N/A",
          duration_weeks: 0, 
          start_date: new Date().toISOString(), 
        }
      : programDetails),
    sessions: sessionsArray,
    message: genResponse.message, 
    error: accumulatedError ? accumulatedError.trim() : undefined 
  };
};

export const updateUserPreferencesAndRegenerateProgram = async (
  userId: string,
  preferencesToUpdate: Partial<UserPreferencesPayload>, 
  token: string
): Promise<AutoGeneratedProgramResponse> => {
  let accumulatedError = "";

  let currentFullPrefs: UserPreferencesDetail;
  try {
    const prefsDetails = await fetchUserPreferencesDetails(userId, token);
    if (prefsDetails.error) {
      return { 
        error: `Erreur lors de la récupération des préférences actuelles: ${prefsDetails.error}`, 
        id: '', user_id: userId, name: '', goal: '', duration_weeks: 0, start_date: '' 
      };
    }
    currentFullPrefs = prefsDetails;
  } catch (e: any) {
    return { 
      error: `Exception lors de la récupération des préférences: ${e.message}`, 
      id: '', user_id: userId, name: '', goal: '', duration_weeks: 0, start_date: '' 
    };
  }

  if (currentFullPrefs.active_program_id) {
    const oldProgramId = currentFullPrefs.active_program_id;
    const deleteResponse = await deleteProgram(oldProgramId, token);
    if (deleteResponse.error) {
      accumulatedError += `Échec de la suppression de l'ancien programme ${oldProgramId}: ${deleteResponse.error}. La régénération continue.\n`;
    }
  }

  const prefsForUpdate: UserPreferencesPayload = {
    ...currentFullPrefs,       
    ...preferencesToUpdate,   
    user_id: userId,          
    active_program_id: undefined, 
  };

  const updatePrefsResponse = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(prefsForUpdate),
  });
  const updatedPrefsResult = await handleApiResponse<UserPreferencesDetail>(updatePrefsResponse);

  if (updatedPrefsResult.error) {
    accumulatedError += `Échec de la mise à jour des préférences utilisateur: ${updatedPrefsResult.error}`;
    return { 
      error: accumulatedError.trim(), 
      id: '', user_id: userId, 
      name: preferencesToUpdate.name || currentFullPrefs.name || '', 
      goal: preferencesToUpdate.goal || currentFullPrefs.goal || '', 
      duration_weeks: 0, start_date: '' 
    };
  }

  const genResponse = await autoGenerateNewProgram(userId, token);

  if (genResponse.error || !genResponse.program_id) {
    accumulatedError += ` Préférences mises à jour, mais échec de la génération du nouveau programme: ${genResponse.error || "ID de programme manquant"}`;
    return {
      error: accumulatedError.trim(),
      id: '', 
      user_id: userId,
      name: updatedPrefsResult.name || '', 
      goal: updatedPrefsResult.goal || '', 
      duration_weeks: 0, 
      start_date: ''
    };
  }
  const newProgramId = genResponse.program_id;

  const finalPreferencesPayload: UserPreferencesPayload = {
    ...updatedPrefsResult, 
    active_program_id: newProgramId,
  };

  const setActiveProgramResponse = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(finalPreferencesPayload),
  });
  const finalPrefsUpdateResult = await handleApiResponse<UserPreferencesDetail>(setActiveProgramResponse);

  const programDetails = await fetchProgramById(newProgramId, token);
  let sessionsArray: ProgramSession[] = [];

  if (!programDetails.error) {
      const sessionsData = await fetchSessionsWithExercisesForProgram(newProgramId, token);
      if (Array.isArray(sessionsData)) {
          sessionsArray = sessionsData;
      } else if(sessionsData.error) {
          accumulatedError += ` Erreur lors du chargement des sessions du nouveau programme: ${sessionsData.error}\n`;
      }
  } else {
      accumulatedError += ` Erreur lors du chargement des détails du nouveau programme: ${programDetails.error}\n`;
  }

  if (finalPrefsUpdateResult.error) {
    accumulatedError += ` Programme généré (ID: ${newProgramId}) mais échec de la définition comme actif: ${finalPrefsUpdateResult.error}`;
  }

  return {
    ...(programDetails.error
      ? {
          id: newProgramId,
          user_id: userId,
          name: "Détails du programme indisponibles",
          goal: finalPreferencesPayload.goal || "N/A",
          duration_weeks: 0,
          start_date: new Date().toISOString(),
        }
      : programDetails),
    sessions: sessionsArray,
    message: genResponse.message, 
    error: accumulatedError ? accumulatedError.trim() : undefined
  };
};

export const fetchProgramById = async (
  programId: string,
  token: string
): Promise<UserProgram> => {
  const response = await fetch(`${API_BASE_URL}/programs/${programId}`, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleApiResponse<UserProgram>(response);
};

export const fetchExerciseDetailsById = async (
  exerciseId: string,
  token: string
): Promise<ExerciseDefinition | { error: string }> => {
  const url = `${API_BASE_URL}/exercises/${exerciseId}`;
  try {
    const response = await fetch(url, {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    });
    return await handleApiResponse<ExerciseDefinition | { error: string }>(response);
  } catch (error: any) {
    return { error: `Exception lors de la récupération des détails de l'exercice: ${error.message}` };
  }
};

export const fetchSessionsWithExercisesForProgram = async (
  programId: string,
  token: string
): Promise<ProgramSession[] | { error: string }> => {
  const sessionsResponse = await fetch(
    `${API_BASE_URL}/sessions/program/${programId}`, 
    {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    }
  );
  const sessionsData = await handleApiResponse<ProgramSession[] | { error: string }>(sessionsResponse);

  if ('error' in sessionsData || !Array.isArray(sessionsData)) {
    return sessionsData; 
  }

  const enrichedSessions = await Promise.all(
    sessionsData.map(async (session) => {
      if (session.exercises && session.exercises.length > 0) {
        const enrichedExercises = await Promise.all(
          session.exercises.map(async (sessionExercise) => {
            if (!sessionExercise.exercise_id) {
              return sessionExercise; 
            }

            const details = await fetchExerciseDetailsById(sessionExercise.exercise_id, token);
            if ('error' in details) {
              return {
                ...sessionExercise,
                description: sessionExercise.description || "Description non disponible en raison d'une erreur.",
                image_url: sessionExercise.image_url || undefined, 
              };
            }
            return {
              ...sessionExercise, 
              name: details.name || sessionExercise.name, 
              muscle_group: details.muscle_group || sessionExercise.muscle_group, 
              description: details.description,
              image_url: details.image_url,
            };
          })
        );
        return { ...session, exercises: enrichedExercises };
      }
      return session; 
    })
  );

  return enrichedSessions;
};

export const fetchExercisesForOneSession = async (
  sessionId: string,
  token: string
): Promise<SessionExercise[] | { error: string }> => {
  const url = `${API_BASE_URL}/sessions/${sessionId}/exercises`; 
  try {
    const response = await fetch(url, {
      method: "GET",
      headers: { Authorization: `Bearer ${token}` },
    });
    const basicExercisesData = await handleApiResponse<Omit<SessionExercise, 'image_url' | 'description'>[] | { error: string }>(response);

    if ('error' in basicExercisesData || !Array.isArray(basicExercisesData)) {
      return basicExercisesData as { error: string }; 
    }
    
    if (basicExercisesData.length === 0) {
        return []; 
    }

    const enrichedExercises = await Promise.all(
      basicExercisesData.map(async (basicExercise) => {
        if (!basicExercise.exercise_id) {
          return { 
            ...basicExercise, 
            description: "Détails non disponibles (ID de définition d'exercice manquant)", 
            image_url: undefined 
          } as SessionExercise; 
        }

        const details = await fetchExerciseDetailsById(basicExercise.exercise_id, token);

        if ('error' in details) {
          return {
            ...basicExercise,
            name: basicExercise.name, 
            muscle_group: basicExercise.muscle_group, 
            description: "Description non disponible en raison d'une erreur.",
            image_url: undefined, 
          } as SessionExercise;
        }
        
        return {
          ...basicExercise, 
          name: details.name || basicExercise.name,
          muscle_group: details.muscle_group || basicExercise.muscle_group,
          description: details.description,
          image_url: details.image_url,
        } as SessionExercise;
      })
    );
    return enrichedExercises;

  } catch (error: any) {
    return { error: `Exception lors de la récupération des exercices de la session: ${error.message}` };
  }
};

export type SubmitPreferencesResponse =
  | UserPreferencesResponse 
  | { message: string; error?: string }; 

export const loginUser = async (
  email: string,
  password: string
): Promise<AuthResponse> => {
  const response = await fetch(`${API_BASE_URL}/auth/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });
  return handleApiResponse<AuthResponse>(response);
};

export const registerUser = async (
  email: string,
  password: string
): Promise<AuthResponse> => {
  const response = await fetch(`${API_BASE_URL}/auth/register`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });
  const registerData = await handleApiResponse<AuthResponse>(response);

  if (registerData.error) {
    return registerData;
  }

  const loginResponse = await fetch(`${API_BASE_URL}/auth/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });
  const loginData = await handleApiResponse<AuthResponse>(loginResponse);

  if (loginData.error) {
    return {
        ...registerData, 
        error: `Enregistrement réussi, mais la connexion automatique a échoué: ${loginData.error}`,
        token: undefined, 
    };
  }
  return {
    ...registerData, 
    token: loginData.token, 
    user: loginData.user || registerData.user, 
    error: undefined, 
  };
};

export const fetchUserPreferences = async (
  userId: string,
  token: string
): Promise<UserPreferencesResponse> => {
  const prefsUrl = `${API_BASE_URL}/user-preferences/${userId}`;
  const response = await fetch(prefsUrl, {
    method: "GET",
    headers: { Authorization: `Bearer ${token}` },
  });
  return handleApiResponse<UserPreferencesResponse>(response);
};

export const submitUserPreferences = async (
  preferences: UserPreferencesPayload
): Promise<SubmitPreferencesResponse> => { 
  const url = `${API_BASE_URL}/user-preferences`; 
  const token = await AsyncStorage.getItem("token");
  if (!token) {
    return { message: "Token d'authentification non trouvé.", error: "Token d'authentification non trouvé." };
  }
  const response = await fetch(url, {
    method: "POST", 
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(preferences),
  });
  return handleApiResponse<SubmitPreferencesResponse>(response);
};

export const autoGenerateNewProgram = async (
  userId: string,
  token: string
): Promise<{message?: string; program_id?: string; error?: string}> => {
  const payload = { user_id: userId };
  const response = await fetch(`${API_BASE_URL}/programs/auto-generate`, {
    method: "POST",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(payload),
  });
  return handleApiResponse<{message?: string; program_id?: string; error?: string}>(response);
};

export const updateUserActiveProgram = async (
  userId: string,
  currentPrefs: UserPreferencesPayload, 
  activeProgramId: string, 
  token: string
): Promise<UserPreferencesDetail | { error: string }> => {
  const updatePayload: UserPreferencesPayload = {
      ...currentPrefs, 
      user_id: userId, 
      active_program_id: activeProgramId, 
  };
  const response = await fetch(`${API_BASE_URL}/user-preferences/${userId}`, {
    method: "PUT",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${token}` },
    body: JSON.stringify(updatePayload),
  });
  return handleApiResponse<UserPreferencesDetail | { error: string }>(response);
};

export const logSessionCompletion = async (
  userId: string,
  sessionId: string,
  token: string
): Promise<{ message?: string; error?: string }> => {
  try {
    const response = await fetch(`${API_BASE_URL}/session-logs`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ user_id: userId, session_id: sessionId }), 
    });
    return await handleApiResponse<{ message?: string; error?: string }>(response);
  } catch (err: any) {
    return { error: err.message || "Erreur lors de l'enregistrement de la session." };
  }
};

export const fetchSessionCompletionCount = async (
  sessionId: string,
  userId: string, 
  token: string
): Promise<SessionCountResponse> => {
  try {
    const response = await fetch(`${API_BASE_URL}/session-logs/${sessionId}/count`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    const result = await handleApiResponse<{ count: number; error?: string }>(response);

    if (result.error) {
      return { count: 0, error: result.error, sessionId };
    }

    if (typeof result.count !== 'number') {
      return { count: 0, error: "Réponse de comptage invalide du serveur.", sessionId };
    }

    return { count: result.count, sessionId };
  } catch (err: any) {
    return { count: 0, error: err.message || "Erreur majeure lors de la récupération du comptage des sessions.", sessionId };
  }
};
